@using Works.Web.Common.Icons
@page "/webs/controls/comboboxedit"
@inject WorksComponentsService WorksCmpService
@inherits WorksPage


<WorksPanel Title="WORKSINPUT " SubTitle="Text edit">

    @*<div id="target">Right click/Touch hold to open the ContextMenu </div>
        <SfContextMenu TValue="MenuItem" Target="#target" Items="@MenuItems" @ref="ContextMenuObj">
            <MenuEvents TValue="MenuItem" ItemSelected="OnActionItemSelected"></MenuEvents>
        </SfContextMenu>*@

    @*<SfGrid DataSource="@Orders" AllowPaging="true" Height="200" @ref="Grid">
            <GridColumns>
                <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
                <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="d" Type="ColumnType.Date" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
            </GridColumns>
        </SfGrid>*@
    <SfTab>
        <TabItems>
            <TabItem Visible="true">
                <ChildContent>
                    <TabHeader IconCss="mdi mdi-database-edit mdi-18px" Text="Teste 0"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <Fields>
                        <Field ColumnSize="ColumnSize.Is4.OnDesktop.Is4.OnMobile">
                            <WorksComboBox TEntity="Uf"
                                           Caption="Uf"
                                           Value="@PageModelInput.Uf?.Id"
                                           ValueChanged="@(async (value) =>
                                               {
                                                   PageModelInput.Uf = value.MapTo<UfDto>();
                                                   await OnValueChangedUfAsync(value);
                                                  // await Task.Delay(5);
                                               })" />

                        </Field>
                        <Field ColumnSize="ColumnSize.Is8.OnDesktop.Is8.OnMobile">
                            <WorksComboBox @ref="@MunicipioComboRef"
                                           TEntity="Municipio" 
                                           Caption="Municipio"
                                           DataSource="@MunicipioLookup"
                                           Value="@PageModelInput.Municipio?.Id"
                                           ValueChanged="@((value) => PageModelInput.Municipio = value.MapTo<MunicipioDto>())" />
                        </Field>
                    </Fields>
                    @*<Fields>
                        <SfComboBox TValue="int?" OnChange="OnChangeData" TItem="ComboBoxItemDto" Value="@PageModelInput.Municipio?.Id" Placeholder="Select Municipio" DataSource="MunicipioLookup">
                            <ComboBoxFieldSettings Text="ItemText" Value="ItemValue"></ComboBoxFieldSettings>
                            <ComboBoxEvents TValue="int?" TItem="ComboBoxItemDto"  ValueChange="@((args)=>OnActionValueChange(args))"></ComboBoxEvents>
                        </SfComboBox>
                    </Fields>*@
                </ContentTemplate>
            </TabItem>
            <TabItem>
                <ChildContent>
                    <TabHeader IconCss="mdi mdi-database-edit mdi-18px" Text="Teste 1"></TabHeader>
                </ChildContent>
                <ContentTemplate>
                    <Fields>
                        <WorksComboBox Value="@CategorySelected?.Enabled.Value()"
                                       TEntity="EnabledType" Caption="ComboBox - Enabled - ValueSelected"
                                       ValueChanged="@((value) => CategorySelected.Enabled = value)">
                        </WorksComboBox>
                    </Fields>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            <WorksMultiSelect Caption="Multi - Categories - ComboBoxItem"
                                              TEntity="Category"
                                              EnableGroup="true"
                                              DataSource="@CategoryLookup"
                                              Value="@CategoryIdList"
                                              OnValueSelected="@((value) => CategoryIdList=value)"
                                              OnMultiValueRemoved="@((value) => CategoryRemovedList=value)"
                                              OnMultiValueSelected="@((value) => GetItems(value))">
                            </WorksMultiSelect>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            <WorksInputMultiSelect TValue="int[]"
                                                   Caption="Multi - Categories"
                                                   TItem="Category"
                                                   DataSource="@CategoryList"
                                                   Value="@CategoryIdList"
                                                   ItemID="Id"
                                                   ItemText="Name"
                                                   OnValueSelected="@((value) => CategoryIdList=value)"
                                                   OnMultiValueRemoved="@((value) => CategoryRemovedList=value)"
                                                   OnMultiValueSelected="@((value) => GetItems(value))">
                            </WorksInputMultiSelect>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            Items Selecionados: @CategorySelectedList?.Count();
                            <WorksDropDown TValue="int?" TItem="Category" ItemID="Id" ItemText="Name"
                                           Value="@CategorySelected?.Id"
                                           DataSource="@CategorySelectedList"
                                           Caption="ComboBox - Selected">
                            </WorksDropDown>

                        </Field>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            Items Removidos: @CategoryRemovedList?.Count();
                            <WorksDropDown TValue="int?" TItem="Category" ItemID="Id" ItemText="Name"
                                           Value="@CategorySelected?.Id"
                                           DataSource="@CategoryRemovedList"
                                           Caption="ComboBox - Removed">
                            </WorksDropDown>
                        </Field>
                    </Fields>

                    <Fields>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            <WorksComboBox Value="@CategorySelected?.Id"
                                           TEntity="Category" Caption="ComboBox - Categories"
                                           ValueChanged="@((value) => CategorySelected=value)">
                            </WorksComboBox>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            <WorksComboBox Value="@CategorySelected?.Id"
                                           TEntity="Category" Caption="ComboBox - Categories - ValueSelected"
                                           ValueSelected="@((value) => CategorySelected=value.ChangeType<Category>())">
                            </WorksComboBox>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            <WorksComboBox Value="@CategorySelected?.Id"
                                           TEntity="Category" Caption="ComboBox - Categories"
                                           DataSource="@CategoryLookup"
                                           ValueChanged="@((value) => CategorySelected=value)">
                            </WorksComboBox>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsQuarter">
                            <WorksDropDown TItem="Category"
                                           TValue="int?"
                                           Value="@CategorySelected?.Id"
                                           Caption="Input - ComboBox - Categories"
                                           DataSource="@CategoryList"
                                           ItemText="Name"
                                           ItemID="Id"
                                           ValueChanged="@((value) => CategorySelected=value)">
                            </WorksDropDown>
                        </Field>
                    </Fields>
                    <Fields>
                        @if (CategorySelected != null)
                        {
                            <Field ColumnSize="ColumnSize.Is2">
                                <WorksInputInteger Caption="Id" @bind-Value="@CategorySelected.Id"></WorksInputInteger>
                            </Field>
                            <Field ColumnSize="ColumnSize.Is10">
                                <WorksInputText Caption="Name" @bind-Value="@CategorySelected.Name"></WorksInputText>
                            </Field>
                        }
                    </Fields>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <SfDropDownList TValue="string" TItem="OrderDetails" Placeholder="Select a customer" Query="@Query">
                                <SfDataManager Url="https://services.odata.org/V4/Northwind/Northwind.svc/Orders" Adaptor="Syncfusion.Blazor.Adaptors.ODataV4Adaptor" CrossDomain=true></SfDataManager>
                                <DropDownListFieldSettings Text="CustomerID" Value="OrderID"></DropDownListFieldSettings>
                                <DropDownListEvents TValue="string" TItem="OrderDetails" ValueChange="@((args) => OnValueChange(args))"></DropDownListEvents>
                            </SfDropDownList>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <SfDropDownList Value="@CategorySelected?.Id" TValue="int?" TItem="Category" Placeholder="Select a category - Trigger Value Change" DataSource="CategoryList">
                                <DropDownListEvents TValue="int?" TItem="Category" ValueChange="@((args) => OnValueChange(args))"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                            </SfDropDownList>
                        </Field>
                    </Fields>
                    <Fields>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <SfComboBox TValue="int?" TItem="Category" On Placeholder="ComboBox - Select a category" DataSource="CategoryList">
                                <ComboBoxFieldSettings Text="Name" Value="Id"></ComboBoxFieldSettings>
                                @*<DropDownListEvents TValue="string" TItem="Category" ValueChange="@((args)=>OnValueChange(args))"></DropDownListEvents>*@
                            </SfComboBox>
                        </Field>
                        <Field ColumnSize="ColumnSize.IsHalf">
                            <DropDownDynamic Value="@CategorySelected?.Id" Caption="Dynamic" TValue="int?" TItem="Category" Items="@CategoryList" ItemText="Name" ItemValue="Id"></DropDownDynamic>
                        </Field>
                    </Fields>
                </ContentTemplate>
            </TabItem>
        </TabItems>
    </SfTab>




</WorksPanel>
<style>
    #target {
        border: 1px dashed;
        height: 150px;
        padding: 10px;
        position: relative;
        text-align: justify;
        color: gray;
        user-select: none;
    }
</style>

@code
{

        #region declarations
    public class PageModelInputDto
    {
        public UfDto? Uf { get; set; }
        public MunicipioDto? Municipio { get; set; }
    }

    public string CategoryId;
    public Query Query = new Query().Select(new List<string> { "CustomerID", "OrderID" }).Take(6).RequiresCount();
    public class OrderDetails
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public int? EmployeeID { get; set; }
        public double? Freight { get; set; }
        public string ShipCity { get; set; }
        public bool Verified { get; set; }
        public DateTime? OrderDate { get; set; }
        public string ShipName { get; set; }
        public string ShipCountry { get; set; }
        public DateTime? ShippedDate { get; set; }
        public string ShipAddress { get; set; }
    }

    private ElementReference inputElement { get; set; }

    [Inject] protected IWorksRepository<Category> CategoryRepository { get; set; }
    [Inject] protected IWorksLookUpService LookUpService { get; set; }


    private int[]? CategoryIdList { get; set; } = new int[] { 1, 5 };

    private object CategoryValue { get; set; } = 0;
    private Category CategorySelected { get; set; } = new Category();
    private SfComboBox<string, DropDownData> CategoryComboBoxRef { get; set; }
    private IEnumerable<ComboBoxItemDto> CategoryLookup { get; set; }
    private IEnumerable<Category> CategoryList { get; set; }
    private IEnumerable<Category> CategorySelectedList { get; set; } = new List<Category>();
    private IEnumerable<Category> CategoryRemovedList { get; set; } = new List<Category>();



    private PageModelInputDto PageModelInput { get; set; } = new PageModelInputDto { Uf = new UfDto { Id = 1 } };
    protected List<Municipio> _municipioList;
    protected WorksComboBox<Municipio> MunicipioComboRef { get; set; }
    protected bool MunicipioComboEnabled { get; set; } = false;
    protected List<ComboBoxItemDto> MunicipioLookup { get; set; } = new List<ComboBoxItemDto>();


    #endregion

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        CategorySelected = new Category();
        var CategoryGroupList = CategoryRepository.GetAllList().GroupBy(f => f.Enabled);
        CategoryLookup = CategoryGroupList.ToComboBoxItemGroupBy();

        var listAll =  await LookUpService.GetAllListAsync<Municipio>();
        _municipioList = listAll.ToList();


    }

    protected async Task OnValueChangedUfAsync(Uf value)
    {
        try
        {
            // MunicipioLookup = _municipioList.Where(f => f.Uf.Sigla == value.Sigla).ToComboBoxItem().ToList();
            var dataList = _municipioList.Where(f => f.Uf?.Sigla == value.Sigla).ToList();
            MunicipioLookup = dataList.ToComboBoxItem().ToList();
            PageModelInput.Municipio = null;
            MunicipioComboEnabled = true;
        }
        catch(Exception ex)
        {
            await WorksCmpService.InfoAsync(ex.Message);
        }

        //StateHasChanged();
    }

    protected  void OnChangeData(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        var value = args;
    }
    protected void OnActionValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, ComboBoxItemDto> args)
    {
        var x = args;

    }
    protected void OnClearComboBox()
    {
        CategoryComboBoxRef?.Clear();
    }

    protected void OnValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, OrderDetails> args)
    {
        var x = args;

    }
    protected void OnValueChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int?, Category> args)
    {
        var x = args;
        CategoryId = args.Value.ToString();
        CategorySelected = args.ItemData as Category;
        StateHasChanged();
    }

    protected void GetItems(IEnumerable<Category> args)
    {

        CategorySelectedList = args;
        StateHasChanged();
    }

    #region MenuItem
    SfContextMenu<MenuItem> ContextMenuObj;
    public List<MenuItem> MenuItems = new List<MenuItem>
{
        new MenuItem{ Text="View", Items= new List<MenuItem>{
        new MenuItem { Text="Large Icons"},
        new MenuItem { Text="Medium Icons"},
        new MenuItem { Text="Small Icons"} } },
        new MenuItem{ Text="Refresh" },
        new MenuItem{ Text="Paste" },
        new MenuItem{ Separator=true },
        new MenuItem{ Text="New" },
        new MenuItem{ Separator=true},
        new MenuItem{ Text="Personalize"}
    };
    public string[] RemoveItem = new string[] { "Paste" };
    public List<MenuItem> InsertAfterItem = new List<MenuItem>
{
        new MenuItem{Text = "Sort By"}
    };
    public List<MenuItem> InsertBeforeItem = new List<MenuItem>
{
        new MenuItem{Text = "Display Settings"}
    };

    protected async Task OnActionItemSelected(MenuEventArgs<MenuItem> args)
    {
        var selectedText = args.Item.Text;
        await WorksCmpService.InfoAsync(selectedText);
    }
    #endregion
}



