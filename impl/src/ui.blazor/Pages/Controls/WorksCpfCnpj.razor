@inherits WorksSfComponentBase<long>
 
<SfTextBox 
           Locale="@Locale"
           ShowClearButton="@ShowClearButton"
           FloatLabelType="@FloatLabel"            
           Placeholder="@Caption" 
           CssClass="@CssClass"
           @bind-Value="@InternalValue" 
           @oninput="@OnInput"
           @onblur="@OnBlur">

</SfTextBox>

@code
{
    protected string InternalValue { get; set; }


    [Parameter] public EventCallback<long> ValueChanged { get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        InternalValue = Format(Value.ToString());

    }
    protected void OnInput(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        var regex = new Regex("[0-9]");
        var value = args.Value.ToString();
        var isOk  = regex.IsMatch(value);

    }
    public void OnBlur(Microsoft.AspNetCore.Components.Web.FocusEventArgs args)
    {
        InternalValue = OnlyNumber(InternalValue);
        InternalValue = Format(InternalValue);
        var value = UnFormat(InternalValue);

        if (value.IsNullOrEmpty()) Value = default(long);
        else Value = value.To<long>();

        ValueChanged.InvokeAsync(this.Value);
        StateHasChanged();
    }
    private string OnlyNumber(string value)
    {
        if (value.IsNullOrEmpty()) return string.Empty;
        return Regex.Replace(value, "[^0-9]", string.Empty);

    }

    private string Format(string value)
    {
        if (!IsCpfCnpj(value)) return string.Empty;
        value = UnFormat(value);
        if (value.Length == 11) value = Convert.ToUInt64(value).ToString(@"000\.000\.000\-00");
        else if (value.Length == 14) value = Convert.ToUInt64(value).ToString(@"00\.000\.000\/0000\-00");
        return value;
    }
    private string UnFormat(string value)
    {
        return value.Replace(".", string.Empty).Replace("-", string.Empty).Replace("/", string.Empty);
    }

    // o metodo IsCpfcnpj recebe dois parâmetros:
    // uma string contendo o cpf ou cnpj a ser validado
    // e um valor do tipo boolean, indicando se o método irá
    // considerar como válido um cpf ou cnpj em branco.
    // o retorno do método também é do tipo boolean:
    // (true = cpf ou cnpj válido; false = cpf ou cnpj inválido)
    private bool IsCpfCnpj(string cpfcnpj)
    {

        if (string.IsNullOrEmpty(cpfcnpj))
            return false;
        else
        {
            int[] d = new int[14];
            int[] v = new int[2];
            int j, i, soma;
            string Sequencia, SoNumero;

            SoNumero = Regex.Replace(cpfcnpj, "[^0-9]", string.Empty);

            //verificando se todos os numeros são iguais
            if (new string(SoNumero[0], SoNumero.Length) == SoNumero) return false;

            // se a quantidade de dígitos numérios for igual a 11
            // iremos verificar como CPF
            if (SoNumero.Length == 11)
            {
                for (i = 0; i <= 10; i++) d[i] = Convert.ToInt32(SoNumero.Substring(i, 1));
                for (i = 0; i <= 1; i++)
                {
                    soma = 0;
                    for (j = 0; j <= 8 + i; j++) soma += d[j] * (10 + i - j);

                    v[i] = (soma * 10) % 11;
                    if (v[i] == 10) v[i] = 0;
                }
                return (v[0] == d[9] & v[1] == d[10]);
            }
            // se a quantidade de dígitos numérios for igual a 14
            // iremos verificar como CNPJ
            else if (SoNumero.Length == 14)
            {
                Sequencia = "6543298765432";
                for (i = 0; i <= 13; i++) d[i] = Convert.ToInt32(SoNumero.Substring(i, 1));
                for (i = 0; i <= 1; i++)
                {
                    soma = 0;
                    for (j = 0; j <= 11 + i; j++)
                        soma += d[j] * Convert.ToInt32(Sequencia.Substring(j + 1 - i, 1));

                    v[i] = (soma * 10) % 11;
                    if (v[i] == 10) v[i] = 0;
                }
                return (v[0] == d[12] & v[1] == d[13]);
            }
            // CPF ou CNPJ inválido se
            // a quantidade de dígitos numérios for diferente de 11 e 14
            else return false;
        }
    }
}