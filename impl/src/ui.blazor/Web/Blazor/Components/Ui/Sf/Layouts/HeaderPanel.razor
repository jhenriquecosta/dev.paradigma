@inject IJSRuntime JsRuntime;
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<div id='sample-header' class="sb-header e-view" role="banner">
    <div class='sb-header-left sb-left sb-table'>
        <div class='sb-header-item sb-table-cell'>
            <div id="sb-toggle-left" @onclick="OnToggleClick" role="button" tabindex="0" class="sb-slide-nav sb-icons toggle-active sb-icon-Hamburger" aria-label="toggle all controls navigation"
                 title='toggle leftpane'></div>
        </div>
        <div class='sb-header-item sb-table-cell' id="sb-header-text" style="padding-left:20px">
            <span>ORION TECNOLOGIAS</span>
        </div>
    </div>
    <div class='sb-header-right sb-right sb-table'>
        <div class="sb-header-item sb-table-cell">
            @*<div id="header-theme-switcher" role="button" tabindex="0" title='Change theme of sample browser'>
                <SfMenu ID='theme-menu' ShowItemOnClick="true" Items='@Themes' @ref="MenuBar" CssClass="e-sample-theme-menu">
                    <MenuEvents Created="ThemeMenuCreated" ItemSelected="OnThemeChange"></MenuEvents>
                </SfMenu>
            </div>*@
        </div>

        <div class='sb-header-item sb-table-cell sb-settings-wrapper'>
            <div class='sb-setting-btn' role="button" tabindex="0" aria-label="toggle settings menu">
                <span class='sb-settings sb-icons sb-icon-Settings-Preferences'></span>
            </div>
        </div>

        <div class='sb-header-item sb-table-cell sb-download-wrapper'></div>
        <div class="sb-header-splitter sb-download-splitter"></div>
        <div class='sb-header-item sb-table-cell sb-download-wrapper'></div>

        <div class="sb-header-item sb-table-cell sb-header-settings sb-icons" @onclick="@OnRightToggleClick" role="button"></div>
    </div>
</div>

<div id='sb-popup-section' class='sb-popups'>
    <div id='settings-popup' class='sb-setting-popup'>
        <div class='sb-setting-header'>
            <span>Preferences</span>
        </div>
        <div class='sb-setting-content'>
            <div class='sb-setting-item sb-responsive-section'>
                <div class='setting-label'>
                    <div class='sb-icons sb-setting-icons sb-icon-Responsive'></div>
                    <div class='sb-setting-text'>Mode Selection</div>
                </div>
                <div class='setting-content btn-group setting-responsive'>
                    <div id='touch' role="button" tabindex="0" class="sb-responsive-items set-border-radious-touch" title="Increased padding for actionable items to accommodate user touches">Touch</div>
                    <div id='mouse' role="button" tabindex="0" class="sb-responsive-items set-border-radious-mouse" title="Default control sizes, optimized for use with mouse">Mouse</div>
                </div>
            </div>
            <div class='sb-setting-item sb-setting-culture'>
                <div class='setting-label'>
                    <div class='sb-icons sb-setting-icons sb-icon-Localization'></div>
                    <div class='sb-setting-text'>Localization</div>
                </div>
                <div>
                    @*<CultureSwitcher />*@
                </div>
            </div>
            <div class="sb-setting-translate">
                <span>*Translated by Google Translator.</span>
            </div>
        </div>
    </div>
</div>

@code {

    public SfMenu<MenuItem> MenuBar;

    [Parameter]
    public EventCallback OnToggleClick { get; set; }

    [Parameter]
    public EventCallback OnRightToggleClick { get; set; }

    public List<MenuItem> Themes = new List<MenuItem>
{
        new MenuItem{
            #pragma warning disable
            Text = "CHOOSE THEME",
            Items = new List<MenuItem>
        {
                new MenuItem { Id = "material", Text = "Material" },
                new MenuItem { Id = "fabric", Text = "Fabric" },
                new MenuItem { Id = "bootstrap", Text = "Bootstrap" },
                new MenuItem { Id = "bootstrap4", Text = "Bootstrap v4" },
                new MenuItem { Id = "highcontrast", Text = "High Contrast" }
            }
            #pragma warning restore
        }
    };

    private Dictionary<string, string> ThemeMap = new Dictionary<string, string>()
{
        { "Material", "material" },
        { "Fabric", "fabric" },
        { "Bootstrap", "bootstrap" },
        { "Bootstrap v4", "bootstrap4" },
        { "High Contrast", "highcontrast" }
    };

    protected void OnThemeChange(Syncfusion.Blazor.Navigations.MenuEventArgs<MenuItemModel> args)
    {
        if (args.Item.Text != "CHOOSE THEME")
        {
            string url = UriHelper.Uri;
            if (url.IndexOf("?theme=") >= 0)
            {
                string[] splittedUrl = url.Split("?theme=");
                url = splittedUrl[0];
            }
            if (ThemeMap.ContainsKey(args.Item.Text))
            {
                url += "?theme=" + ThemeMap[args.Item.Text];
            }
            JsRuntime.InvokeAsync<Object>("switchTheme", url);
        }
    }

    protected void ThemeMenuCreated(object args)
    {
        JsRuntime.InvokeAsync<Object>("getTheme", args);
    }

}
