
@inject IJSRuntime JsRuntime;
@inject AppBlazorService AppBlazorService;
@inject NavigationManager UriHelper;

<SideBarComponent Position="SidebarPlacement.Left" IsExpanded="@isOpen">
    <div class='sb-left-pane e-view'>
        <div class="sb-left-pane-header">
            <div class="sb-header-top">
                <div class="sb-sf">
                    <div class="sb-mobile-logo"></div>
                    <div class="sb-name">OWS Projects</div>
                </div>
            </div>
        </div>
        <div class="sb-home" @onclick="HomeButtonClick">
            <div class="sb-home-link sb-icons sb-icon-home"></div>
            <div class="sb-home-text">
                <span>HOME</span>
            </div>
        </div>

        <div class='sb-control-navigation e-view'>
            <NavMenu @ref="NavMenuRef"></NavMenu>
        </div>
        @if (AppBlazorService.IsDevice)
        {
            <div class='sb-left-footer'>
                <div class="sb-mobile-header-buttons">
                    @*<a href='https://www.syncfusion.com/blazor-components' target="_blank">
                            <div class="sb-mobile-header-about">
                                About
                            </div>
                        </a>
                        <a href='https://www.syncfusion.com/downloads/blazor/' target="_blank">
                            <div class="sb-mobile-header-price">Pricing</div>
                        </a>*@
                </div>
                <div class='sb-left-footer-links'></div>
            </div>
        }
    </div>
</SideBarComponent>

@if (AppBlazorService.IsDevice)
{
    <style>
        .sb-mobile-logo {
            background: url(@(AppBlazorService.ImagePath + "syncfusion-mobile-logo.svg")) no-repeat;
        }
    </style>
}

@code {

    private bool isOpen { get; set; }

    /// <summary>
    /// NavMenuComponent reference for outside usage.
    /// </summary>
    public NavMenu NavMenuRef { get; set; }

    /// <summary>
    /// Expand or collapse SideBarComonent based on its previous state.
    /// </summary>
    public void UpdateExpandedState()
    {
        this.isOpen = !isOpen;
        StateHasChanged();
    }

    /// <summary>
    /// Returns bool value for expanded state of the component.
    /// </summary>
    public bool IsExpanded()
    {
        return isOpen;
    }

    // Home button click handler
    private async Task HomeButtonClick()
    {
        // Set default values to AppBlazorService for home page navigation.
        AppBlazorService.ModuleName = null;
        AppBlazorService.ApplicationInfo = null;
        // AppBlazorService.Spinner.Show();
        UriHelper.NavigateTo(UriHelper.BaseUri);
        var themeName = AppBlazorUtils.GetThemeName(UriHelper.Uri);
        await JsRuntime.InvokeVoidAsync("sfBlazorSB.updateBodyClass", themeName);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        this.isOpen = true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            // Collapse the SideBarComponent for device rendering.
            if (AppBlazorService.IsDevice)
            {
                this.isOpen = !AppBlazorService.IsDevice;
                StateHasChanged();
            }
        }
    }
}