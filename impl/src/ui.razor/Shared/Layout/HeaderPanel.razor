
@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@inject AppBlazorService AppBlazorService;

<div id='sample-header' class="sb-header e-view" role="banner">
    <div class='sb-header-left sb-left sb-table'>
        <div class='sb-header-item sb-table-cell'>
            <div id="sb-toggle-left" @onclick="OnToggleClick" @onclick:stopPropagation="true" role="button" tabindex="0" class="sb-slide-nav sb-icons toggle-active sb-icon-hamburger" aria-label="toggle all controls navigation"
                 title='toggle leftpane'></div>
        </div>
        <div class='sb-header-item sb-table-cell' id="sb-header-text" style="padding-left:20px">
            <span>OWS Projects</span>
        </div>
    </div>
    <div class='sb-header-right sb-right sb-table'>
        <div class="sb-header-item sb-table-cell">
            <div id="header-theme-switcher" role="button" tabindex="0" title='Change theme of Application browser'>
                <DropDownComponent DataSource="@AppBlazorUtils.ThemeData" DefaultValue="CHOOSE THEME" OnSelect="OnThemeChange">
                    <ItemTemplate>
                        @if (currentTheme == context.ID)
                        {
                            <span class="sb-icons sf-theme-selection-icon"></span>
                        }
                        <span>@context.Text</span>
                    </ItemTemplate>
                </DropDownComponent>
            </div>
        </div>

        <div class='sb-header-item sb-table-cell sb-search-container'>
            <div class="@searchClass" role="button" tabindex="0" aria-label="toggle Application search" title="Toggle Application search" @onclick="@OnSearchRender">
                <span class="sb-settings sb-icons sb-icon-search"></span>
            </div>
        </div>

        <div class='sb-header-item sb-table-cell sb-settings-container'>
            <div class='@preferenceClass' role="button" tabindex="0" aria-label="toggle settings menu" title="Toggle Application browser preferences" @onclick="@OnPreferenceClick">
                <span class='sb-settings sb-icons sb-icon-settings-preferences'></span>
            </div>
            <Preferences @ref="@preferenceRef"></Preferences>
        </div>


        <div class="sb-header-item sb-table-cell sb-header-settings sb-icons" @onclick="@OnRightToggleClick" @onclick:stopPropagation="true" role="button"></div>
    </div>
</div>

<style>
    .github-logo {
        background: url(@(AppBlazorService.ImagePath + "github-logo.svg")) no-repeat center;
    }
</style>

@code {
    private string searchClass { get; set; }
    private string currentTheme { get; set; }
    private string preferenceClass { get; set; }
    private bool isPreferenceClicked { get; set; }
    private Preferences preferenceRef { get; set; }

    /// <summary>
    /// Triggers event callback on left toggle button action.
    /// </summary>
    [Parameter]
    public EventCallback OnToggleClick { get; set; }

    [CascadingParameter]
    protected MainLayout Layout { get; set; }

    /// <summary>
    /// Triggers event callback on right toggle button action in device rendering.
    /// </summary>
    [Parameter]
    public EventCallback OnRightToggleClick { get; set; }

    // Theme switcher change handler
    private void OnThemeChange(DropDownData args)
    {
        var currentTheme = AppBlazorUtils.GetThemeName(UriHelper.Uri);
        if (currentTheme != args.ID)
        {
            var url = AppBlazorUtils.GetThemeUrl(UriHelper.Uri, args.ID);
            UriHelper.NavigateTo(url, true);
        }
    }

    // Search icon click handler.
    private async Task OnSearchRender()
    {
        await Layout.ShowSearchLayout(true);
    }

    // Preferences icon click handler.
    private void OnPreferenceClick()
    {
        isPreferenceClicked = true;
        var isActive = preferenceClass.Contains(AppBlazorUtils.ACTIVE_CLASS);
        if (isActive)
        {
            preferenceClass = AppBlazorUtils.RemoveClass(preferenceClass, AppBlazorUtils.ACTIVE_CLASS);
        }
        else
        {
            preferenceClass = AppBlazorUtils.AddClass(preferenceClass, AppBlazorUtils.ACTIVE_CLASS);
        }
        preferenceRef.ShowPopup(!isActive);
    }

    /// <summary>
    /// Hides the preferences popup element.
    /// </summary>
    public void HidePreferences()
    {
        if (!isPreferenceClicked && !preferenceRef.IsPopupClicked())
        {
            preferenceClass = AppBlazorUtils.RemoveClass(preferenceClass, AppBlazorUtils.ACTIVE_CLASS);
            preferenceRef.ShowPopup(false);
            StateHasChanged();
        }
        isPreferenceClicked = false;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        currentTheme = AppBlazorUtils.GetThemeName(UriHelper.Uri);
        searchClass = AppBlazorUtils.HEADER_SEARCH_CLASS;
        preferenceClass = AppBlazorUtils.HEADER_PREFERENCES_CLASS;
    }
}
