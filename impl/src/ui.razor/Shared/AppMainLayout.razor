@using Syncfusion.Blazor;
@using Microsoft.AspNetCore.Components;

@inject IJSRuntime JsRuntime;
@inject NavigationManager UriHelper;
@inject AppBlazorService AppBlazorService;

@inherits LayoutComponentBase;
@implements IDisposable;

<WorksToasts Timeout="100"></WorksToasts>


<CascadingValue Value="@this">


    @*Set empty layout to home page and components which have open in new window functionality.*@
    @{
        AppBlazorService.Update(UriHelper);
        //  var isEmptyLayout = AppBlazorService.ApplicationInfo != null && !UriHelper.Uri.Contains(AppBlazorService.ApplicationInfo.Component.Url);
    }
    


        <div class="sample-browser e-view sf-new" @onclick="OnAppClick">
            <div class="sb-mobile-overlay sb-hide"></div>
            <HeaderPanel @ref="HeaderPanelRef" OnToggleClick="@OnToggleClick" OnRightToggleClick="@OnRightToggleClick"></HeaderPanel>
            <div class="sb-content e-view">
                <div class="@searchContainer">
                    <div class="index-search-container">
                        <SearchComponent @ref="@searchRef"></SearchComponent>
                    </div>
                </div>
                <LeftPanel @ref="LeftPanelRef"></LeftPanel>
                <RightPanel @ref="RightPanelRef">@Body</RightPanel>
                @if (AppBlazorService.IsDevice)
                {
                    <SideBarComponent IsExpanded="@rightSidebarExpanded" Position="SidebarPlacement.Right">
                        <Preferences IsMainLayout="true"></Preferences>
                    </SideBarComponent>
                    @*<ApplicationNavigator @ref="ApplicationNavigatorRef"></ApplicationNavigator>*@
                }
            </div>
        </div>


    
</CascadingValue>

   

    @code
{
        [Inject]
        protected SyncfusionBlazorService SyncfusionService { get; set; }

        private bool isDeviceMode { get; set; }

        private bool isSearchIconClick { get; set; }
        private string searchContainer { get; set; }
        private bool rightSidebarExpanded { get; set; }

        private DotNetObjectReference<object> dotnetObjectRef { get; set; }


        private SearchComponent searchRef { get; set; }
        private HeaderPanel HeaderPanelRef { get; set; }

        /// <summary>
        /// LeftPane reference for outside usage.
        /// </summary>
        public LeftPanel LeftPanelRef { get; set; }
        /// <summary>
        /// RightPane reference for outside usage.
        /// </summary>
        public RightPanel RightPanelRef { get; set; }

        /// <summary>
        /// ApplicationNavigator reference for outside usage.
        /// </summary>
        // public ApplicationNavigator ApplicationNavigatorRef { get; set; }

        // Left sidebar click handler
        private async Task OnToggleClick()
        {
            // Update left sidebar expand and collapse status
            this.LeftPanelRef.UpdateExpandedState();
            // Collapse right sidebar if it is expanded
            if (AppBlazorService.IsDevice && rightSidebarExpanded)
            {
                rightSidebarExpanded = !rightSidebarExpanded;
            }
            await JsRuntime.InvokeAsync<string>("callResizeEvent");
        }

        // Right sidebar click handler
        private async Task OnRightToggleClick()
        {
            // Update right sidebar expand and collapse status
            rightSidebarExpanded = !rightSidebarExpanded;
            // Collapse left sidebar if it is expanded
            if (LeftPanelRef.IsExpanded())
            {
                LeftPanelRef.UpdateExpandedState();
            }
            await ShowSearchLayout();
        }

        // App click handler for collapse the sidebar components in device rendering.
        private async Task OnAppClick()
        {
            this.CollapseSideBar();
            HeaderPanelRef.HidePreferences();
            if (searchRef.IsFocusOut() && !isSearchIconClick)
            {
                // Await the search layout hide process for the search list selection.
                await Task.Delay(200);
                await ShowSearchLayout();
            }
            else
            {
                isSearchIconClick = false;
            }
        }

        /// <summary>
        /// Show search layout in the demos page.
        /// </summary>
        public async Task ShowSearchLayout(bool isIconClick = false)
        {
            if (isIconClick && searchContainer.Contains(AppBlazorUtils.DISPLAY_NONE))
            {
                isSearchIconClick = isIconClick;
                searchContainer = AppBlazorUtils.RemoveClass(searchContainer, AppBlazorUtils.DISPLAY_NONE);
                await searchRef.InputFocus();
            }
            else
            {
                searchContainer = AppBlazorUtils.AddClass(searchContainer, AppBlazorUtils.DISPLAY_NONE);
            }
        }

        /// <summary>
        /// Collapse both right and left sidebar component.
        /// </summary>
        public void CollapseSideBar()
        {
            if (AppBlazorService.IsDevice)
            {
                // Collapse left sidebar if it is expanded on document click
                if (LeftPanelRef.IsExpanded())
                {
                    LeftPanelRef.UpdateExpandedState();
                }
                // Collapse right sidebar if it is expanded on document click
                if (rightSidebarExpanded)
                {
                    rightSidebarExpanded = !rightSidebarExpanded;
                }
            }
        }

        /// <summary>
        /// Update BreadCrumb component with current Application details.
        /// </summary>
        /// <param name="componentName">Specifies the current component name.</param>
        /// <param name="category">Specifies the current Application category name.</param>
        /// <param name="ApplicationName">Specifies the current Application name.</param>
        public void UpdateBreadCrumb(string componentName, string category, string ApplicationName)
        {
            // this.RightPaneRef.BreadCrumbRef?.Refresh(componentName, category, ApplicationName);
        }

        /// <summary>
        /// Update device mode while resizing window through UI.
        /// </summary>
        /// <param name="isDevice">Specifies the current resolution is device mode or not.</param>
        [JSInvokable]
        public void UpdateDeviceMode(bool isDevice)
        {
            isDeviceMode = isDevice;
            AppBlazorService.IsDevice = isDevice;
            StateHasChanged();
        }

        protected override void OnInitialized()
        {
            base.OnInitialized();
            // Enable ripple effect to the material theme.
            if (UriHelper.Uri.IndexOf("material") > 0)
            {
                SyncfusionService.EnableRipple();
            }
            searchContainer = AppBlazorUtils.SEARCH_OVERLAY + AppBlazorUtils.SPACE + AppBlazorUtils.DISPLAY_NONE;
        }

        protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);

            if (firstRender)
            {
                // Add Spinner ref to the Application servie to get access in ApplicationBaseComponent class.


                dotnetObjectRef = DotNetObjectReference.Create<object>(this);
                // Get device information for mobile sidebar rendering
                this.AppBlazorService.IsDevice = await this.JsRuntime.InvokeAsync<bool>("sfBlazorSB.isDevice", dotnetObjectRef);
                this.isDeviceMode = this.AppBlazorService.IsDevice;
                if (this.AppBlazorService.IsDevice && (UriHelper.Uri != UriHelper.BaseUri))
                {
                    LeftPanelRef?.UpdateExpandedState();
                    StateHasChanged();
                }
            }
            else
            {
                // Refresh meta data for home page navigation.
                if (UriHelper.BaseUri == UriHelper.Uri)
                {
                    AppBlazorService.MetaData?.Refresh();
                }
            }
            if (!this.AppBlazorService.IsDevice)
            {
                // Render Application navigator in the right pane for desktop.
                // RightPaneRef?.ApplicationNavigatorRef.Rerender(AppBlazorService.IsDevice);
            }
        }

        public void Dispose()
        {
            dotnetObjectRef?.Dispose();
        }
    }

